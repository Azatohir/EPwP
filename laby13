# Zadanie 0
from sklearn.datasets import load_svmlight_file
import numpy as np

X, y = load_svmlight_file('breast-cancer.txt')
X = X.toarray()

# Zadanie 1
y = numpy.where(y == 2, -1, y)
y = numpy.where(y == 4, 1, y)
print(X)

X_normalized = (X - X.min()) / (X.max() - X.min())

# Zadanie 2
matplotlib.pyplot.scatter(X_normalized[:, 1], X_normalized[:, 2], c=y, s=30, alpha=0.5)
matplotlib.pyplot.show()

# Zadanie 3
B = np.matmul(np.matmul(np.linalg.inv(np.matmul(X_normalized.T, X_normalized)), X_normalized.T), y)

print(B)

# Zadanie 4
import matplotlib.pyplot as plt

X_plus = X_normalized[y == +1]
X_minus = X_normalized[y == -1]

plt.hist(B*X_plus)
plt.hist(B*X_minus)
plt.show()

# Zadanie 5
predictions = np.where(np.sum(B * X_normalized, axis=1) > 0, 1, -1)

# Zadanie 6
from sklearn.metrics import accuracy_score

accuracy = accuracy_score(predictions, y) * 100
print(accuracy)

# Zadanie 7
C = 100
B = np.matmul(np.matmul(np.linalg.inv(np.matmul(X_normalized.T, X_normalized)+1/C*np.identity(10)), X_normalized.T), y)

# Zadanie 8
class LRClassifier:
    def __init__(self, C, scale=True):
        self.C = C
        self.scale = scale
        self.B = None
        self.scaler = sklearn.preprocessing.MinMaxScaler()

    def fit(self, X, y):
        if self.scale:
            X = self.scaler.fit_transform(X)
        X = np.column_stack((np.ones(X.shape[0]), X))
        y_binary = np.where(y == np.unique(y)[0], -1, 1)
        self.B = np.linalg.inv(X.T @ X + 1/self.C * np.identity(X.shape[1])) @ X.T @ y_binary

    def predict(self, X):
        if self.scale:
            X = self.scaler.transform(X)
        X = np.column_stack((np.ones(X.shape[0]), X))
        predictions = np.sign(X @ self.B)
        return predictions

clf = LRClassifier(C=100)
Xt = np.array([[1, 0], [1, 1], [1, 2], [1, 3], [1, 4]])
yt = np.array(['x', 'x', 'y', 'y', 'y'])
clf.fit(Xt, yt)
X = np.array([[1, -1], [1, 0.9], [1, 2.1]])
print(clf.predict(X))
